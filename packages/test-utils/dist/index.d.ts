import { Project, SourceFile } from 'ts-morph';
import { genMsgNames, genRpcMessages, genTestMessageFiles } from './message-gen';
import { genServices } from './service-gen';
export { genTestMessageFiles, genMsgNames, genRpcMessages, genServices };
export declare const testQuerySvc = "\ntype TestQuerySvc = rpc.QuerySvc<{\n  /**\n   * @throws 404\n   * @returns 200\n   */\n  getSomethingById(id: number): string;\n\n  /**\n   * @throws 500\n   * @returns 202\n   */\n  addSomething(something: any): any;\n\n  /**\n   * @throws 401\n   * @returns 201\n   */\n  addSomethingElse(something: any): any;\n\n  /**\n   * @throws 400\n   * @returns 204\n   */\n  deleteSomething(something: any): any;\n\n  /**\n   * @throws 403\n   * @returns 301\n   */\n  preRequest(): boolean;\n\n  /**\n   * @access OPTIONS\n   */\n  getOpts(): string[];\n\n  /**\n   * @access PATCH\n   */\n  updateSomething(something: any): string;\n}";
export declare const genSourceFile: (source: string, project: Project, name?: string) => SourceFile;
export declare const genSourceFiles: (sources: [string, string][], project: Project) => SourceFile[];
export declare const makeStructTestSource = "\n  /** @kind cbor */\ntype CborType = rpc.Msg<{}>\n\n/** @kind cbor */\ntype AnotherCbor = rpc.Msg<{}>\ntype TestType1 = {\n  prop1: CborType;\n  prop2: AnotherCbor;\n}\n\n/**\n*\n*/\ntype NoCbor = rpc.Msg<{}>\n\ntype MoreNoCbor = rpc.Msg<{}>\n\ntype TestType2 = {\n  prop1: NoCbor;\n  prop2: MoreNoCbor;\n}\n";
export declare const optional: () => "" | "?";
export declare const useCbor: () => "" | "\n  /**\n * @kind cbor\n */\n ";
export declare const exportTestMessages = "\nexport type ExportedType = rpc.Msg<{\n  name: $.str\n}>\n\ntype NonExportedType = rpc.Msg<{\n  name: $.str\n}>\n";
export declare const genImports: (msgNames: string[]) => string;
export declare const hasCborParamsTestData = "\n\n/** @kind cbor */\ntype CborParam = rpc.Msg<{}>\ntype TestService1 = rpc.MutationSvc<{\n  method1(param: CborParam, param2: $.str): $.list<$.int8>;\n  method2(param: $.int8): CborParam;\n}>\n\ntype TestService2 = rpc.MutationSvc<{\n  /** @kind cbor */\n  method1(param: $.str, param2: $.int8): $.unit;\n  method2(param: $.str, param3: $.int16): $.nil;\n}>\n\ntype TestService3 = rpc.MutationSvc<{\n  method1(param: $.str): $.unit;\n}>\n";
export declare const genTestFile: () => string;
export declare const isValidDataTypeTestSource = "\n  type Valid = rpc.Msg<{\n      dummy: $.str\n  }>\n  type SomeSvc = rpc.Msg<{\n      invalidType = string\n      validType = $.str\n      inValid = rpc.Ms<{\n      name: $.str\n      }>\n      valid = $.int8\n      invalid1 = $.int\n      valid1 = $.uint8\n      invalid2 = Who\n      valid2 = Valid\n  }>\n";
export declare const typesTestData = "\nimport {SomeStruct} from './somewhere'\n/** @kind cbor */\ntype CborType = rpc.Msg<{name: $.str}>\n\ntype TestType = rpc.Msg<{\n  dict: $.map<$.int8, $.int8>\n  tuple2: $.tuple2<$.int8, $.int8>\n  tuple3: $.tuple3<$.int8, $.int16, $.uint16>\n  tuple4: $.tuple4<$.int8, $.str, $.bool, $.timestamp>\n  tuple5: $.tuple5<$.str, $.str, $.dyn, $.blob, $.float32>\n  list: $.list<$.bool>\n  struct: SomeStruct\n  structLiteral: rpc.Msg<{\n    name: $.str,\n    age: $.int8,\n    birthDate: $.timestamp,\n    weight: $.float32\n    }>\n  cborType: CborType\n  bool: $.bool\n  int8: $.int8\n  uint8: $.uint8\n  int16: $.int16\n  uint16: $.uint16\n  int32: $.int32\n  uint32: $.uint32\n  int64: $.int64\n  uint64: $.uint64\n  float32: $.float32\n  float64: $.float64\n  str: $.str\n  timestamp: $.timestamp\n  blob: $.blob\n  dyn: $.dyn\n\tunit: $.unit\n  nil: $.nil\n  nestedDict: $.map<$.int8, $.list<$.map<$.bool, $.list<$.str>>>>\n  nestedList: $.list<$.tuple4<$.tuple2<$.int64, $.list<$.blob>>, $.str, $.bool, $.map<$.str, $.timestamp>>>\n\tnestedMsg: rpc.Msg<{\n  \t    name: $.str\n\t\tdata: $.map<$.int8, $.list<$.map<$.bool, $.list<$.str>>>>\n\t}>\n\tnestedTuple: $.tuple3<$.list<$.tuple2<$.float32, $.float64>>, $.str, $.dyn>\n}>\n";
export declare const dataTypeTestsSource = "\ntype TestType = rpc.Msg<{\n  dict: $.map<$.str, $.int8>\n  tuple2: $.tuple2<$.int8, $.int8>\n  tuple3: $.tuple3<$.int8, $.int16, $.uint16>\n  tuple4: $.tuple4<$.int8, $.str, $.bool, $.timestamp>\n  tuple5: $.tuple5<$.str, $.str, $.dyn, $.blob, $.float32>\n  list: $.list<$.bool>\n  structLiteral: rpc.Msg<{\n    name: $.str,\n    age: $.int8,\n    birthDate: $.timestamp,\n    weight: $.float32\n    }>\n  bool: $.bool\n  int8: $.int8\n  uint8: $.uint8\n  int16: $.int16\n  uint16: $.uint16\n  int32: $.int32\n  uint32: $.uint32\n  int64: $.int64\n  uint64: $.uint64\n  float32: $.float32\n  float64: $.float64\n  str: $.str\n  timestamp: $.timestamp\n  blob: $.blob\n  dyn: $.dyn\n  nestedDict: $.map<$.str, $.list<$.map<$.str, $.list<$.str>>>>\n  queryParamList: $.list<$.int8>\n}>";
//# sourceMappingURL=index.d.ts.map